# Project Cursor Rules

## UI/UX Standards

### Skeleton Loading (REQUIRED)

**ALWAYS use skeleton loading instead of spinners or circular progress indicators.**

#### Implementation Requirements:

1. **Never use CircularProgress or spinner components** for loading states
2. **Always use Skeleton components** from `@mui/material` or custom skeleton loaders
3. Skeleton loaders should **match the layout** of the actual content being loaded
4. Show **meaningful structure** during loading (cards, lists, forms, etc.)
5. Maintain **consistent spacing and sizing** between skeleton and actual content

#### Available Skeleton Components:

- `StatCardSkeleton` - For dashboard statistics cards
- `ReviewCardSkeleton` - For review list items
- `CompanyCardSkeleton` - For company cards
- `ProfileSectionSkeleton` - For profile sections
- `KeywordChipSkeleton` - For keyword chips
- `ContentSkeleton` - Generic content skeleton

Location: `/reviews/src/components/SkeletonLoaders.tsx`

#### Example Pattern:

```tsx
if (loading) {
  return (
    <Container maxWidth="xl" sx={{ py: 4 }}>
      <Stack spacing={4}>
        <Typography variant="h4">Dashboard</Typography>
        <Typography variant="body1" color="text.secondary">
          Loading your data...
        </Typography>

        <Box
          sx={{
            display: "grid",
            gridTemplateColumns: "repeat(4, 1fr)",
            gap: 3,
          }}
        >
          {[1, 2, 3, 4].map((i) => (
            <StatCardSkeleton key={i} />
          ))}
        </Box>
      </Stack>
    </Container>
  );
}
```

#### Why Skeleton Loading:

- **Better UX**: Users see the structure of content before it loads
- **Perceived Performance**: Makes the app feel faster
- **Reduces Layout Shift**: Content doesn't jump when it loads
- **Professional**: Modern apps (Facebook, LinkedIn, etc.) use skeleton loading
- **Apple-like**: Aligns with minimalist, smooth user experience

### Design System

- Follow Apple.com's minimalist aesthetic
- Clean, spacious layouts with generous whitespace
- Subtle shadows and borders
- Smooth transitions and animations
- Typography: SF Pro Display/Text font stack
- Colors: Black (#000000), Blue (#0071e3), Gray tones
- Border radius: 12-18px for cards, 980px for buttons

### Component Standards

- Cards: 18px border radius, subtle shadows
- Buttons: Pill-shaped (980px radius), no text transform
- Spacing: Generous padding and margins (multiples of 8px)
- Typography: Proper letter-spacing and font weights

### Performance

- Always show loading states with skeleton loaders
- Optimize images and assets
- Lazy load when appropriate
- Minimize layout shifts

## Component Architecture

### Self-Contained Components (REQUIRED)

**ALWAYS create self-contained components with minimal dependencies.**

#### Implementation Requirements:

1. **Minimal Props**: Only pass essential data, avoid passing entire objects when possible
2. **Self-Contained Logic**: Include all necessary logic within the component
3. **Clear Interfaces**: Define explicit prop interfaces with TypeScript
4. **Single Responsibility**: Each component should have one clear purpose
5. **Reusable**: Components should be reusable across different contexts
6. **No External Dependencies**: Avoid dependencies on specific parent components

#### Component Creation Guidelines:

```tsx
// ✅ GOOD - Self-contained component
interface UserCardProps {
  userId: string;
  userName: string;
  userEmail: string;
  onEdit: (userId: string) => void;
}

export const UserCard = ({
  userId,
  userName,
  userEmail,
  onEdit,
}: UserCardProps) => {
  // All logic contained within component
  const handleEdit = () => onEdit(userId);

  return (
    <Card>
      <CardContent>
        <Typography variant="h6">{userName}</Typography>
        <Typography variant="body2">{userEmail}</Typography>
        <Button onClick={handleEdit}>Edit</Button>
      </CardContent>
    </Card>
  );
};

// ❌ BAD - Tightly coupled component
interface BadUserCardProps {
  user: User; // Passing entire object
  company: Company; // Unnecessary dependency
  onEdit: (user: User, company: Company) => void; // Complex callback
}
```

#### Benefits:

- **Reusability**: Components can be used in multiple contexts
- **Testability**: Easier to unit test with clear interfaces
- **Maintainability**: Changes to one component don't affect others
- **Performance**: Smaller prop changes trigger fewer re-renders
- **Clarity**: Clear separation of concerns

#### Examples of Self-Contained Components:

- `CompanyHeader` - Takes company data, renders header
- `FetchPlatformReviews` - Takes platforms array, renders platform buttons
- `ReviewCard` - Takes review data, renders review display
- `LocationCard` - Takes location data, renders location info

## MUI Grid Component Fix

### Problem

MUI Grid components may show TypeScript errors about missing `item` prop or `xs`/`sm`/`md` props not being recognized.

### Solution

Based on MUI version, use the correct Grid component:

```tsx
// ✅ CORRECT - MUI v7+ (Current Grid component)
import { Grid } from '@mui/material';

<Grid container spacing={3}>
  <Grid size={{ xs: 12, sm: 6, md: 3 }}>
    {/* content */}
  </Grid>
</Grid>

// ✅ ALTERNATIVE - MUI v5/v6 (Grid2 component)
import { Grid2 as Grid } from '@mui/material';

<Grid container spacing={3}>
  <Grid xs={12} sm={6} md={3}>
    {/* content */}
  </Grid>
</Grid>

// ❌ AVOID - Legacy Grid with item prop (deprecated in v7)
<Grid item xs={12} sm={6} md={3}>  // Deprecated in v7
```

### Implementation Steps:

1. **Check MUI version**: `npm list @mui/material`
2. **If MUI v7+**: Use `Grid` with `size` prop (no `item` prop)
3. **If MUI v5/v6**: Use `Grid2` import with individual size props
4. **Always test**: Verify Grid layout works correctly

### Migration Guide:

- **v7**: `item` prop removed, use `size={{ xs: 12, sm: 6 }}` instead of `xs={12} sm={6}`
- **v6**: Size props renamed to `size` prop
- **v5**: Use `Grid2` import for new Grid component

### Common Error Patterns to Fix:

- `Property 'item' does not exist` → Remove `item` prop, use `size` prop
- `Property 'xs' does not exist` → Use `size={{ xs: 12 }}` format
- `No overload matches this call` → Check MUI version and use correct Grid component
